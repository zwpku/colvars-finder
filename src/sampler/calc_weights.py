import math
import numpy as np
import os, sys
import pandas as pd
import configparser
from openmm import unit

def calc_weights(sys_temp, sampling_temp, csv_filename, traj_weight_filename, energy_col_idx=1):

    # use potential energy in the csv file generated by OpenMM code
    print (f'\n=============Calculate Weights============')
    print (f'reading potential from: {csv_filename}')
    vec = pd.read_csv(csv_filename)
    # modify the name of the first column
    vec.rename(columns={vec.columns[0]: 'Time (ps)'}, inplace=True)
    # show the data 
    print ('whole data:\n', vec.head(8))

    # select the column containing energy used to calculate weights
    energy_col_name=vec.columns[energy_col_idx]
    print ('use {:d}th column to reweight, name: {}'.format(energy_col_idx, energy_col_name) )

    sampling_beta = 1.0 / (sampling_temp * unit.BOLTZMANN_CONSTANT_kB * unit.AVOGADRO_CONSTANT_NA)
    sys_beta = 1.0 / (sys_temp * unit.BOLTZMANN_CONSTANT_kB * unit.AVOGADRO_CONSTANT_NA)
    energy_list = vec[energy_col_name]
    mean_energy = energy_list.mean()

    print ('\nenergy:\n', energy_list.head(8) )
    print (f'\nsampling beta={sampling_beta}, system beta={sys_beta}')

    # compute weights from potential energy
    nonnormalized_weights = [math.exp(-(sys_beta - sampling_beta) * (energy - mean_energy) * unit.kilojoule_per_mole) for energy in energy_list] 
    weights = pd.DataFrame(nonnormalized_weights / np.mean(nonnormalized_weights), columns=['weight'] )

    # insert time info
    time_col_idx = 0
    time_col_name=vec.columns[time_col_idx]
    weights.insert(0, time_col_name, vec[time_col_name])
    print ('\nweight:\n', weights.head(8), '\nSummary of weights:\n', weights.describe())

    weights.to_csv(traj_weight_filename, index=False)
    print (f'weights saved to: {traj_weight_filename}')

config = configparser.ConfigParser()
config.read('params.cfg')

sys_temp = config['System'].getfloat('sys_temperature') * unit.kelvin
sampling_temp = config['Sampling'].getfloat('sampling_temperature') * unit.kelvin

sampling_path = config['Sampling'].get('sampling_path')
csv_filename = config['Sampling']['csv_filename']
traj_weight_filename = config['Sampling']['traj_weight_filename']

energy_col_idx_in_csv = config['Sampling'].getint('energy_col_idx_in_csv')

assert energy_col_idx_in_csv , "Column idx in csv file not specified for calculating weights!"

csv_filename=os.path.join(sampling_path, csv_filename)
traj_weight_filename = os.path.join(sampling_path, traj_weight_filename)

print (f'\nSampling temperature: {sampling_temp}, system temperature: {sys_temp}')

calc_weights(sys_temp, sampling_temp, csv_filename, traj_weight_filename, energy_col_idx_in_csv)


